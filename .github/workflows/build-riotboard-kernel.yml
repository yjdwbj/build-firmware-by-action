# This is a basic workflow to help you get started with Actions

name: Compile Linux Kernel For RIotBoard (imx6 armv7l)

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  push:
  workflow_dispatch:
  schedule:
    - cron: 2 50 * * *

env:
  REPO_BRANCH: main
  DEFCONFIG_FILE: riotboard_defconfig
  KERNEL_GIT: "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git"
  TZ: Asia/Shanghai

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build Linux kernel for RIotBoard
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main
        with:
          ref: ${{ github.ref }}
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential wget git tree libelf-dev debmake debhelper -y
          sudo -E apt-get -qq install gcc g++ binutils make bison flex yasm libelf-dev binutils-arm-linux-gnueabi gcc-arm-linux-gnueabi -y
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"

      - name: download kernel source
        run: |
          vlist=$(git ls-remote --tags $KERNEL_GIT | awk -F '/' '{print $3}' | grep '^v[0-9].[0-9].[0-9]\{1,2\}$')
          maxn=0
          tag=""
          for num in $vlist
          do
              # v=$(echo $num | tr -d -c 0-9)
              ma=$(echo $num | cut -d. -f1 | tr -d -c 0-9)
              mi=$(echo $num | cut -d. -f2)
              re=$(echo $num | cut -d. -f3)
              v=$((ma * 1000 + mi * 100 +  re))
              if (( $v > $maxn )); then
                  maxn=$v
                  tag=$num
              fi
          done
          M_VER=$(echo ${tag} | awk -F '.' '{print $1".x"}')
          F_VER=$(echo ${tag} | tr -d -c 0-9.)
          echo "M_VER=$(echo ${tag} | awk -F '.' '{print $1".x"}')" >> $GITHUB_ENV
          echo "F_VER=$(echo ${tag} | tr -d -c 0-9.)" >> $GITHUB_ENV
          echo "full version is: ${F_VER}, $F_VER"
          KER_FNAME="linux-${F_VER}"
          KER_TAR="${KER_FNAME}.tar.xz"
          DKER_URL="https://cdn.kernel.org/pub/linux/kernel/${M_VER}/${KER_TAR}"
          wget -q -c "$DKER_URL"
          tar xf ${KER_TAR}

      - name: build kernel
        env:
          ARCH: arm
          CROSS_COMPILE: arm-linux-gnueabi-
        run: |
          echo "LOCALVERSION=$(date +%Y%m%d)-lcy" >> $GITHUB_ENV
          LOCALVERSION=$(date +%Y%m%d)-lcy
          KER_FNAME="linux-${F_VER}"
          KER_INSTALL_DIR=${LOCALVERSION}/install
          KER_BUILD_DIR=${KER_FNAME}
          KERNEL_PKG=kernel-riotboard-${LOCALVERSION}.tar.gz2
          echo "KERNEL_PKG=kernel-riotboard-${LOCALVERSION}.tar.gz2" >> $GITHUB_ENV

          MAKE_OPTS="-j`nproc` \
                     LOCALVERSION=${LOCALVERSION} \
                     EXTRAVERSION="" \
                     INSTALL_PATH=${KER_INSTALL_DIR}/boot \
                     INSTALL_MOD_PATH=${KER_INSTALL_DIR}"

          [ -e $DEFCONFIG_FILE ] && mv $DEFCONFIG_FILE ${KER_BUILD_DIR}/arch/arm/configs/riotboard_defconfig
          cd ${KER_BUILD_DIR}

          make riotboard_defconfig
          scripts/config --disable SYSTEM_REVOCATION_KEYS
          scripts/config --disable SYSTEM_TRUSTED_KEYS
          scripts/config --disable DEBUG_INFO
          scripts/config --enable DEBUG_INFO_NONE

          sed -i '/^CONFIG_SYSTEM_TRUSTED_KEY/s/=.*/=""/' .config
          make prepare
          make bindeb-pkg -j `nproc` LOCALVERSION=${LOCALVERSION}
          echo "output kernel file ${KERNEL_PKG}"
          cp arch/arm/boot/zImage ${{ github.workspace }}/
          cp arch/arm/boot/dts/nxp/imx/imx6dl-riotboard.dtb ${{ github.workspace }}/
          wget -c "https://cdn.kernel.org/pub/linux/kernel/${M_VER}/ChangeLog-${F_VER}"

      - uses: actions/upload-artifact@v4
        with:
          name: kernel-riotboard-${{ env.LOCALVERSION }}
          path: |
            ${{ github.workspace }}/*.deb
            ${{ github.workspace }}/zImage
            ${{ github.workspace }}/imx6dl-riotboard.dtb

      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          echo "RiotBoard linux kernel ChangeLog-${F_VER}" > riotboard.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: kernel-riotboard-${{ env.LOCALVERSION }}
          body_path: riotboard.txt
          files: |
            ${{ github.workspace }}/*.deb
            ${{ github.workspace }}/zImage
            ${{ github.workspace }}/imx6dl-riotboard.dtb

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: steps.tag.outputs.status == 'success'
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

